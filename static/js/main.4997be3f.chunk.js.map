{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","member","color","img","date","Date","menu","setState","react_default","a","createElement","src","width","_this2","timerID","setInterval","tick","clearInterval","_this3","id","className","items","map","index","style","concat","onClick","clicked","bind","key","galery","toLocaleTimeString","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCwHzBC,2BAnHb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAEXC,OAAS,OACTC,MAAQ,QACRC,IAAM,WAENC,KAAM,IAAIC,MATIZ,uEAYVa,GAENV,KAAKW,SAAS,CAEZN,OAASK,EAAKL,OACdC,MAAQI,EAAKJ,MACbC,IAAMG,EAAKH,uCA0Bb,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,IAAK,OAAOf,KAAKI,MAAMG,IAAKS,MAAM,oDAG7B,IAAAC,EAAAjB,KACjBA,KAAKkB,QAAUC,YACb,kBAAMF,EAAKG,QAAO,kDAKpBC,cAAcrB,KAAKkB,wCAInBlB,KAAKW,SAAS,CACZH,KAAO,IAAIC,wCAIN,IAAAa,EAAAtB,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKS,GAAG,OAGNX,EAAAC,EAAAC,cAAA,MAAIU,UAAU,QAAd,aACAZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OAAOxB,KAAKJ,MAAM6B,MAAMC,IAAI,SAAChB,EAAKiB,GAC7C,IAAIC,EAAQ,OAOZ,OAJGN,EAAKlB,MAAME,QAAUI,EAAKJ,QAC3BsB,EAAK,GAAAC,OAAMD,EAAN,eAGAhB,EAAAC,EAAAC,cAAA,KACLU,UAAaI,EAAM,IAAIlB,EAAKJ,MAE5BwB,QAAWR,EAAKS,QAAQC,KAAKV,EAAKZ,GAClCuB,IAAON,GAENjB,EAAKL,WAiBZO,EAAAC,EAAAC,cAAA,OAAKU,UAAa,QAAlB,cACaZ,EAAAC,EAAAC,cAAA,QAAMU,UAAa,YAAYxB,KAAKI,MAAME,OAAQN,KAAKI,MAAMC,QAAcO,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAC1Fd,KAAKkC,UAIRtB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAAA,0BAAkBd,KAAKI,MAAMI,KAAK2B,qBAAlC,cA5GQC,cCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf0C,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KClEjEC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,CAAKvC,MAvBP,CACZ,CACEpB,OAAS,OACTC,MAAQ,QACRC,IAAM,YAER,CACEF,OAAS,OACTC,MAAQ,OACRC,IAAM,YAEP,CACCF,OAAS,OACTC,MAAQ,SACRC,IAAM,YAEP,CACCF,OAAS,OACTC,MAAQ,OACRC,IAAM,eAKR0D,SAASC,eAAe,SDTnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,QAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAAf,OAAMuC,QAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MChB/BE","file":"static/js/main.4997be3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    //default\r\n    this.state = {\r\n      // active : \"Merah\",\r\n      member : \"Lisa\",\r\n      color : \"merah\",\r\n      img : \"lisa.jpg\",\r\n      //date state\r\n      date: new Date(),\r\n    };\r\n  }\r\n  clicked(menu){\r\n    //untuk memperbarui state sesuai dengan menu yang dipilih\r\n    this.setState({\r\n      // active: menu,\r\n      member : menu.member,\r\n      color : menu.color,\r\n      img : menu.img,   \r\n    });\r\n  }\r\n  // cara 1 nampilin gambar\r\n  // menusaya(){\r\n  //   //gambar harus sesuai dengan nama statenya\r\n  //   return <img src={\"img/\"+this.state.active+\".jpg\"} width=\"300\"></img>\r\n  // }\r\n  // // cara 2 nampilin gambar\r\n  // menusaya2(){\r\n  //   //menyimpan var gambar dan mengubah nama gambar sesuai statenya\r\n  //   var gambar;\r\n  //   if(this.state.active.toLocaleLowerCase() === 'merah'){\r\n  //     gambar = \"gege\";\r\n  //   } else if(this.state.active.toLocaleLowerCase() === 'kuning'){\r\n  //     gambar = \"isyana\";\r\n  //   } else if(this.state.active.toLocaleLowerCase() === 'hijau'){\r\n  //     gambar = \"chelsea\";\r\n  //   } else if(this.state.active.toLocaleLowerCase() === 'biru'){\r\n  //     gambar = \"velove\";\r\n  //   }\r\n  //   return <img src={\"img/\"+gambar+\".jpg\"} width=\"300\"></img>\r\n  // }\r\n\r\n  //cara 3 passing data langsung ke state\r\n  galery(){\r\n    return <img src={\"img/\"+this.state.img} width=\"300\"></img>\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.timerID = setInterval(\r\n      () => this.tick(),1000,\r\n    );\r\n  }\r\n\r\n  componentWillMount(){\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick(){\r\n    this.setState({\r\n      date : new Date(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\"> \r\n        { /* map akan loop sebanyak menu yang didefinisikan*/ }\r\n        {/* kemudian mengembalikan elemen <a/> */}\r\n        <h2 className=\"info\">BlackPink</h2>\r\n        <nav className=\"nav\">{this.props.items.map((menu,index) => {\r\n            var style = 'menu';\r\n\r\n            //penamaan state color tidak harus sesuai pada menu.\r\n            if(this.state.color === menu.color){\r\n              style = `${style} is-active`;\r\n            }\r\n\r\n            return <a\r\n              className = {style+\" \"+menu.color}\r\n              //bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked'\r\n              onClick = {this.clicked.bind(this,menu)} // guanakan this karena clicked merupakan fungsi yang dibuat sendiri dan global\r\n              key = {index}\r\n            >\r\n              {menu.member}\r\n            </a>;\r\n          }\r\n        )}\r\n        </nav>\r\n\r\n        {/* gambar dan menu cara 1 dan 2 dengan menu dan active*/}\r\n        {/* <div className =  \"info\">\r\n          ini adalah <span className = {\"selected \"+this.state.active}>{this.state.active}</span><br/><br/>\r\n          {this.menusaya2()}\r\n        </div> */}\r\n        \r\n        {/* cara memanggil gambar sebagai background dengan css  */}\r\n        {/* <div className = {\"gambar \"+this.state.active}>\r\n        </div> */}\r\n\r\n        {/* gambar dan menu cara 3 dengan menu.member */}\r\n        <div className =  \"info\">\r\n          ini adalah <span className = {\"selected \"+this.state.color}>{this.state.member}</span><br/><br/>\r\n          {this.galery()}\r\n          {/* <img src={\"img/\"+this.state.img} width=\"300\"></img> */}\r\n        </div>\r\n\r\n        <div className=\"info\">\r\n          <h2>Sekarang jam {this.state.date.toLocaleTimeString()}.</h2>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Custom.css'; //import cssnya\r\nimport App from './App'; \r\nimport * as serviceWorker from './serviceWorker'; // agar dapat di akses ofline\r\n\r\n// const items = ['Merah','Kuning','Hijau','Biru'];  \r\nconst items = [\r\n  {\r\n    member : 'Lisa',\r\n    color : 'merah',\r\n    img : 'lisa.jpg',\r\n  },\r\n  {\r\n    member : 'Jeni',\r\n    color : 'pink',\r\n    img : 'jeni.jpg',\r\n  }\r\n  ,{\r\n    member : 'Rose',\r\n    color : 'kuning',\r\n    img : 'rose.jpg',\r\n  }\r\n  ,{\r\n    member : 'Jiso',\r\n    color : 'biru',\r\n    img : 'jiso.jpg',\r\n  },\r\n];\r\n\r\nReactDOM.render(<App items={items}/>,\r\n  document.getElementById('root')  \r\n);\r\n\r\nserviceWorker.register(); // service worker agar dapat di akses ofline.. ganti unregister agar hanya dapat di akses online\r\n"],"sourceRoot":""}